代理模式：为一个对象提供一个代理来控制和管理对这个对象的访问。

                  客户----->代理------真实对象

角色：
    1.主体：声明真实对象和代理对象的一致性接口(被两者都继承)。
    2.代理：含有对真实对象的引用，提供与真实对象相同接口以便代理真实对象，相当于对真实对象的封装，(会附属一些其他操作)。
    3.真实对象：被代理的对象，真实对象。
    
静态代理：被代理对象是确定的。

动态代理：被代理对象动态指定。
         位于Java.lang.reflect包下。
         AOP的原理就是动态代理机制
         
        实现角色：1.接口InvocationHandler,包括唯一方法invoke(Object proxy,Method method,Object[] args) throws Throwable
                        proxy:被代理真实对象    
                        method: 真实对象的某个方法的Method对象  
                        args: 调用真实对象某个方法接受的参数
                                 
                                 
                 2.类Proxy ：用来动态创建一个代理对象的类 主要用newProxyInstance(classLoader loader,Class<?>[] interfaces,InvocationHandler h)
                      loader:定义哪个ClassLoader对象对代理对象进行加载
                      Interfaces:将要给代理对象提供的一组接口，如果提供这组接口，这个代理对象就实现了该接口
                      h:代理对象调用方法时，会关联到哪个IncocationHandler对象上  

代理模式应用：分布计算方式RMI和Corba

参考：http://www.cnblogs.com/xiaoluo501395377/p/3383130.html
     http://blog.csdn.net/liangbinny/article/details/18656791
